{"version":3,"file":"static/webpack/static/development/pages/result.js.e50ac5f61136511fd2e5.hot-update.js","sources":["webpack:///./components/Itinerary/Route.js"],"sourcesContent":["import * as React from \"react\"\nimport { graphql, createFragmentContainer } from \"@kiwicom/relay\"\nimport styled, { ThemeProvider } from \"styled-components\"\nimport {\n  Stack,\n  Text,\n  Hide,\n  CarrierLogo,\n  getTokens\n} from \"@kiwicom/orbit-components\"\nimport { FlightDirect } from \"@kiwicom/orbit-components/lib/icons\"\nimport {\n  format,\n  differenceInHours,\n  differenceInMinutes\n} from \"date-fns\"\n\nconst StyledNights = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 150px;\n`\n\nconst StyledLine = styled.div`\n  display: block;\n  height: 1px;\n  width: 150px;\n  background-color: ${({ theme }) => theme.orbit.paletteCloudNormal};\n`\n\nconst getCarrierFromParts = parts =>\n  parts.map(part => ({\n    code: part.carrier\n  }))\n\nconst Route = ({ flight, nights }) => {\n  const { parts, from, to } = flight\n  const carriers = getCarrierFromParts(parts)\n\n  console.log(carriers)\n\n  const departureTimeLocal = new Date(from.timeLocal * 1000)\n  const arrivalTimeLocal = new Date(to.timeLocal * 1000)\n  const departureTime = format(departureTimeLocal, \"HH:mm\")\n  const departureArrival = format(arrivalTimeLocal, \"HH:mm\")\n\n  const hours = differenceInHours(\n    arrivalTimeLocal,\n    departureTimeLocal\n  )\n\n  const minutes =\n    differenceInMinutes(arrivalTimeLocal, departureTimeLocal) -\n    hours * 60\n\n  return (\n    <Stack direction=\"row\" shrink>\n      <Stack direction=\"column\" shrink>\n        <Stack direction=\"row\" shrink>\n          <Stack\n            direction=\"column\"\n            grow={false}\n            basis=\"150px\"\n            spacing=\"comfy\"\n          >\n            <Stack direction=\"row\" align=\"center\">\n              <ThemeProvider theme={{ orbit: getTokens() }}>\n                <CarrierLogo carriers={carriers} />\n              </ThemeProvider>\n              <Text type=\"secondary\" size=\"small\">\n                {carriers.map(carrier => carrier.code).join(\", \")}\n              </Text>\n            </Stack>\n          </Stack>\n          <Stack\n            direction=\"column\"\n            shrink\n            basis=\"250px\"\n            spacing=\"compact\"\n          >\n            <Stack direction=\"column\" spacing=\"extraTight\">\n              <Text weight=\"bold\">{`${departureTime} - ${departureArrival}`}</Text>\n              <Text size=\"small\">\n                {format(departureTimeLocal, \"ddd D MMM\")}\n              </Text>\n            </Stack>\n          </Stack>\n          <Stack direction=\"column\" spacing=\"extraTight\" shrink>\n            <Hide on={[\"smallMobile\", \"mediumMobile\", \"largeMobile\"]}>\n              <Text>\n                {hours && `${hours}h`} {minutes && `${minutes}m`}\n              </Text>\n              <Stack direction=\"row\" align=\"center\" spacing=\"tight\">\n                <Text size=\"small\" type=\"secondary\">\n                  {from.city} {from.iata}\n                </Text>\n                <FlightDirect color=\"secondary\" size=\"small\" />\n                <Text size=\"small\" type=\"secondary\">\n                  {to.city} {to.iata}\n                </Text>\n              </Stack>\n            </Hide>\n          </Stack>\n        </Stack>\n        {nights && (\n          <Stack direction=\"row\" shrink grow={false} align=\"center\">\n            <StyledLine />\n            <StyledNights>\n              <Text type=\"secondary\" size=\"small\">\n                {nights <= 1\n                  ? `${nights} night `\n                  : `${nights} nights `}\n                in {to.city}\n              </Text>\n            </StyledNights>\n          </Stack>\n        )}\n      </Stack>\n    </Stack>\n  )\n}\n\nexport default createFragmentContainer(Route, {\n  flight: graphql`\n    fragment Route_flight on Route {\n      from {\n        city\n        iata\n        timeLocal\n      }\n      to {\n        city\n        iata\n        timeLocal\n      }\n      parts {\n        carrier\n      }\n    }\n  `\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;AASA;AAMA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AADA;AAAA;AADA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AADA;;;;A","sourceRoot":""}